version: '3.9'
services:

  ms-configuration:
    container_name: ms-configuration
    image: ms-configuration-service:${version_config:-latest}
    restart: always
    env_file:
      - .env
    build:
      context: ms-configuration/.
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    networks:
      - keycloak_postgre

  ms-eureka:
    depends_on:
      - ms-configuration
    container_name: ms-eureka
    image: ms-eureka-service:${version_eureka:-latest}
    restart: always
    env_file:
      - .env
    build:
      context: ms-eureka/.
      dockerfile: Dockerfile
      args: # pour la construction de l'image
        - SPRING_PROFILES_ACTIVE=${profile_actif_preprod}
        - CONFIG_SERVICE_URI=${service_config_host_preprod}
    ports:
      - "8099:8099"
    environment: # pour la construction du conteneur
      - SPRING_PROFILES_ACTIVE=${profile_actif_preprod}
      - CONFIG_SERVICE_URI=${service_config_docker}
    networks:
      - keycloak_postgre

  ms-gateway:
    depends_on:
      - ms-configuration
    container_name: ms-gateway
    image: ms-gateway-service:${version_gateway:-latest}
    restart: always
    env_file:
      - .env
    build:
      context: ms-gateway
      dockerfile: Dockerfile
      args: # pour la construction de l'image
        - SPRING_PROFILES_ACTIVE=${profile_actif_preprod}
        - CONFIG_SERVICE_URI=${service_config_host_preprod}
    ports:
      - "8077:8077"
    environment: # pour la construction du conteneur
      - SPRING_PROFILES_ACTIVE=${profile_actif_preprod}
      - CONFIG_SERVICE_URI=${service_config_docker}
    networks:
      - keycloak_postgre
  #    healthcheck: # test l'état de santé
  #      test: [ "CMD", "curl", "-f", "http://${service_config_docker}/actuator/health" ]
  #      interval: 30s
  #      timeout: 10s
  #      retries: 5

  ms-article:
    depends_on:
      - ms-configuration
    container_name: ms-article
    restart: always
    image: ms-article-service:${version_article:-latest}
    env_file:
      - .env
    build:
      context: ms-article
      dockerfile: Dockerfile
      args: # pour la construction de l'image
        - SPRING_PROFILES_ACTIVE=${profile_actif_preprod}
        - CONFIG_SERVICE_URI=${service_config_host_preprod}
    deploy:
      replicas: 1
    ports:
      - "9010:9010"
    environment: # pour la construction du conteneur
      - SPRING_PROFILES_ACTIVE=${profile_actif_preprod}
      - CONFIG_SERVICE_URI=${service_config_docker}
    networks:
      - keycloak_postgre
#    healthcheck: # test l'état de santé
#      test: [ "CMD", "curl", "-f", "http://${service_config_docker}/actuator/health" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5

networks:
  keycloak_postgre:
    name: sso_bd
    external: true  # indic qu'il est déjà present
    driver: bridge  # Réseau docker isolé